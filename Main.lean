import ModalLogicKite
import Mathlib.Lean.CoreM
namespace Main

open Lean Qq LO FirstOrder Meta Kite

def dot : Vizualize.Dot (Vertex q(SyntacticFormula ‚Ñí‚Çí·µ£)) EdgeType where
  settings :=
    r"graph[
      rankdir = BT;
    ]

    node [
      shape=plaintext
      margin=0.05
      width=0
      height=0
    ];

    edge [
      style = solid
      arrowhead = none
    ];"
  vertices := [
    ‚ü®"EQ", q(Theory ‚Ñí‚Çí·µ£), q(ùêÑùêê)‚ü©,
    ‚ü®"R‚ÇÄ", q(Theory ‚Ñí‚Çí·µ£), q(ùêë‚ÇÄ)‚ü©,
    ‚ü®"PA‚Åª", q(Theory ‚Ñí‚Çí·µ£), q(ùêèùêÄ‚Åª)‚ü©,
    ‚ü®"PA", q(Theory ‚Ñí‚Çí·µ£), q(ùêèùêÄ)‚ü©
  ]
  edge := EdgeType.search
  vs v := v.name
  es e :=
    match e with
    | .weaker => "[style = dashed]"
    | .strict => "[]"

#eval dot.toString

end Main

open Main
open Lean
open Lean.Meta

unsafe
def main : IO Unit := do
  searchPathRef.set compile_time_search_path%
  withImportModules #[Import.mk `ModalLogicKite false] {} 0 fun env => do
    let ‚ü®s, _, _‚ü© ‚Üê dot.toString.toIO { fileName := "<compiler>", fileMap := default } { env := env }
    IO.FS.writeFile ("test.dot") s
