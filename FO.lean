import LogicsKite

open Lean Qq
open LO.FirstOrder
open LO.Meta
open LO.Meta.Kite.FO

def Main.kite : Kite.Generator (Vertex q(SyntacticFormula ‚Ñí‚Çí·µ£)) EdgeType where
  vertices := [
    ‚ü®"CobhamR0", q(Theory ‚Ñí‚Çí·µ£), q(ùêë‚ÇÄ)‚ü©,
    ‚ü®"PAMinus", q(Theory ‚Ñí‚Çí·µ£), q(ùêèùêÄ‚Åª)‚ü©,
    ‚ü®"ISigma0", q(Theory ‚Ñí‚Çí·µ£), q(ùêàùö∫‚ÇÄ)‚ü©,
    ‚ü®"ISigma1", q(Theory ‚Ñí‚Çí·µ£), q(ùêàùö∫‚ÇÅ)‚ü©,
    ‚ü®"PA", q(Theory ‚Ñí‚Çí·µ£), q(ùêèùêÄ)‚ü©,
    ‚ü®"TA", q(Theory ‚Ñí‚Çí·µ£), q(ùêìùêÄ)‚ü©,
  ]
  search := EdgeType.search
  vs v := s!"{v.name}"
  es e :=
    match e with
    | .weaker _ => "weaker"
    | .strict _ => "strict"

open Lean
open Lean.Meta

unsafe
def main : IO Unit := do
  searchPathRef.set compile_time_search_path%
  withImportModules #[Import.mk `LogicsKite false] {} 0 fun env => do
    let ‚ü®s, _, _‚ü© ‚Üê Main.kite.toString.toIO { fileName := "<compiler>", fileMap := default } { env := env }
    IO.FS.writeFile ("FO.json") s
